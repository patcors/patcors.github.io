{"version":3,"sources":["confetti.js","Loading-button.js","App.js","serviceWorker.js","index.js","logo.jpg"],"names":["style","position","Confetti","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRef","bind","assertThisInitialized","nextProps","config","startVelocity","Math","random","elementCount","dragFriction","duration","active","confetti","container","ref","react_default","a","createElement","className","Component","slowClick","setLoading","setTimeout","Loading_button","_ref","confettiConfig","isLoading","onClick","src","logo","alt","confetti_Confetti","App","handleButttonClick","e","setState","RunConfettiAnimation","stopAnimation","updateValue","state","settings","value","prop","evt","encode","target","prevState","assign","defineProperty","_this$state","FunctionApp","isAnimationOn","React","_useWindowSize","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","_useState","useState","_useState2","slicedToArray","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","_useState3","_useState4","setWidth","_useState5","_useState6","list","_useState7","_useState8","_useState9","easeInOutQuad","_useState10","map","item","index","key","ReactTimeout","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3056a582.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { confetti } from \"dom-confetti\";\r\n\r\nconst style = {\r\n  position: \"relative\"\r\n};\r\n\r\nexport default class Confetti extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.setRef = this.setRef.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n\r\n    const config = {\r\n      startVelocity: Math.random()*5+20,\r\n      elementCount:  Math.random()*50+80,\r\n      dragFriction: 0.05,\r\n      duration: 2500,\r\n    };\r\n\r\n    if (nextProps.active && !this.props.active) {\r\n      confetti(this.container, config);\r\n    }\r\n  }\r\n\r\n  setRef(ref) {\r\n    this.container = ref;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.className} style={style} ref={this.setRef} />\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport logo from './logo.jpg';\r\n\r\n\r\nimport Confetti from './confetti';\r\n\r\n\r\nconst slowClick = (setLoading) => () => {\r\n    setLoading(true);\r\n    setTimeout(() => setLoading(false), 10);\r\n};\r\n\r\nexport default ({confettiConfig, isLoading, setLoading}) => {\r\n    return (\r\n        <div >\r\n            <button  className=\"profileButton\" onClick={slowClick(setLoading)}\r\n            >\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                <Confetti\r\n                    className=\"loading-button__confetti\"\r\n                    active={!isLoading}\r\n                    config={confettiConfig}\r\n                />\r\n            </button>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {easeInOutQuad} from 'tween-functions';\r\nimport LoadingButton from \"./Loading-button.js\";\r\nimport ReactTimeout from 'react-timeout';\r\nimport {useEffectOnce} from 'react-use/lib/useWindowSize';\r\nimport logo from './logo.jpg';\r\nimport Confetti from 'react-confetti';\r\nimport './App.css';\r\n\r\nfunction useWindowSize() {\r\n    const isClient = typeof window === 'object';\r\n\r\n    function getSize() {\r\n        return {\r\n            width: isClient ? window.innerWidth : undefined,\r\n            height: isClient ? window.innerHeight : undefined\r\n        };\r\n    }\r\n\r\n    const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n    useEffect(() => {\r\n        if (!isClient) {\r\n            return false;\r\n        }\r\n\r\n        function handleResize() {\r\n            setWindowSize(getSize());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n    return windowSize;\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setLoading = this.setLoading.bind(this);\r\n        this.updateValue = this.updateValue.bind(this);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            settings: {\r\n                startVelocity: 45,\r\n                elementCount: 30000,\r\n                dragFriction: 0.1,\r\n                duration: 5000,\r\n            }\r\n        };\r\n\r\n        this.state = {\r\n            RunConfettiAnimation: false\r\n        }\r\n    }\r\n\r\n    setLoading(value) {\r\n        this.setState({ isLoading: value });\r\n    }\r\n\r\n    updateValue(prop, evt, encode) {\r\n        const value = encode(evt.target.value);\r\n        this.setState(prevState => ({\r\n            settings: Object.assign({}, prevState.settings, { [prop]: value })\r\n        }));\r\n    }\r\n\r\n    handleButttonClick = (e) => {\r\n        this.setState({\r\n            RunConfettiAnimation: true\r\n        });\r\n        this.props.setTimeout(this.stopAnimation, 2000)\r\n    };\r\n\r\n    stopAnimation = () => {\r\n        this.setState({\r\n            RunConfettiAnimation: false\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { settings, isLoading } = this.state;\r\n        return (\r\n            <FunctionApp settings={settings}\r\n                         isLoading={isLoading}\r\n                         setLoading={this.setLoading}\r\n                         onClick={this.handleButttonClick}\r\n                         isAnimationOn={this.state.RunConfettiAnimation}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction FunctionApp(props) {\r\n    const {width, height} = useWindowSize();\r\n    const [windowWidth, setWidth] = useState(width);\r\n    const [list, updateList] = useState([]);\r\n    const [rate, updateRate] = useState(0);\r\n    const [tweens, updateTweens] = useState(easeInOutQuad(1, 0, 0, 2000));\r\n    const Tweens = () => {\r\n        updateTweens(easeInOutQuad(1, 300, 0, 5000));\r\n        const tweenFunction = easeInOutQuad(1, 300, 0, 5000);\r\n        updateRate(tweenFunction);\r\n        const tweenFunction2 = easeInOutQuad(1, 0, 300, 5000);\r\n        updateRate(tweenFunction2);\r\n        //setTimeout(updateRate(0), 5000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(window.innerWidth)\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    });\r\n\r\n    function handleClick(props) {\r\n        updateList([...list, \"AMELIA SUCKS\"]);\r\n        props.onClick()\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n\r\n                <LoadingButton\r\n                    isLoading={props.isLoading}\r\n                    setLoading={props.setLoading}\r\n                    confettiConfig={props.settings}\r\n                />\r\n\r\n                {\r\n                    list.map((item, index) => <div key={index}>{item}</div>)\r\n                }\r\n                <div>\r\n                    AMELIA SUCKS\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ConfettiAdjust(props) {\r\n    return (\r\n        <Confetti className=\"confetti\"\r\n                  confettiSource={{x: 300, y: 300, w: 2, h: 2}}\r\n                  friction={0.99}\r\n                  wind={0}\r\n                  gravity={0.08}\r\n                  initialVelocityY={20}\r\n                  initialVelocityX={2}\r\n                  recycle={props.on}\r\n        />\r\n    )\r\n}\r\n\r\nfunction SpinningLogo(props) {\r\n    return (\r\n        <div className=\"buttonDiv\">\r\n            <button onClick={() => props.onClick()} className=\"profileButton\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n            </button>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ReactTimeout(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2c555b14.jpg\";"],"sourceRoot":""}